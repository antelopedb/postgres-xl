<!-- doc/src/sgml/release-xl-10r1.sgml -->
<!-- See header comment in release.sgml about typical markup -->
 <sect1 id="release-xl-10r1.1">
  <title>Postgres-XL Release 10r1.1</title>

  <note>
  <title>Release Date</title>
  <simpara>2019-02-19</simpara>
  </note>
  <para>
   This release includes all the bug fixes and security fixes from PostgreSQL
10.6. In addition, there are a few Postgres-XL specific bug fixes in this
release. For information about new features in the Postgres-XL 10r1 major release, see
   <xref linkend="release-xl-10r1">.
  </para>
  <sect2>
   <title>Migration to Version Postgres-XL 10r1.1</title>
   <para>
    A dump/restore is not required for those running Postgres-XL 10r1.
   </para>
  </sect2>
  <sect2>
   <title>Changes</title>
   <itemizedlist>
    <listitem>
     <para>
      Allow RECURSIVE queries to work on function scans.
     </para>
    </listitem>

    <listitem>
     <para>
      Fix a bug in standby's handling of known XIDs.
     </para>
    </listitem>

    <listitem>
     <para>
      Fix a problem with pg_rewind where it fails to create temporary objects
on the datanode.
     </para>
    </listitem>

    <listitem>
     <para>
      Add a new --coordinator-only option to vacuumdb.
     </para>
     <para>
      This makes the facilities provided by ANALYZE (COORDINATOR) available to the
vacuumdb command.
     </para>
    </listitem>

    <listitem>
     <para>
      Overhaul CREATE BARRIER handling.
     </para>
     <para>
      CREATE BARRIER mechanism now uses higher level locks for synchronization
instead of using LWLocks across network calls. This makes CREATE BARRIER
interruptible and also responsive to timeouts.
     </para>
    </listitem>

    <listitem>
     <para>
      Fix a bug where certain kinds of joins were not getting pushed down to
the datanodes.
     </para>
     <para>
      When a query involves a 3-way (or N-way) join between two distributed tables and
    a replicated table, such joins should be shippable to datanodes as long as the
    join between the distributed tables is an equi-join on the distributed column,
    with the same distribution property AND the join between the result of the join
    on distributed tables and the replicate table is either an INNER JOIN or a LEFT
    JOIN where the right side is the replicated table. This fix allows such joins to
    be pushed down to the datanodes.
     </para>
    </listitem>

    <listitem>
     <para>
      Implement additional coordinator/datanode GUCs to control communication between nodes and the
GTM.
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <varname>gtm_connect_timeout</varname> specifies the timeout in
seconds that a node waits for connecting to the GTM.
       </para>
       <para>
         The default value of the GUC is <literal>60</literal>.
       </para>
      </listitem>
      <listitem>
       <para>
        <varname>gtm_comm_timeout</varname> specifies the timeout in
seconds that a node waits for the response from the GTM.
       </para>
       <para>
        The default value of the GUC is <literal>0</literal> which means the
node will wait forever for the response.  User may change value of this
parameter if faced with unpleasant situations where the node infinitely waits
for a response from the GTM. Otherwise this should be left to the default. 
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <para>
      Add a new <varname>comm_timeout</varname> GUC to the GTM proxy.
     </para>
     <para>
      This specifies a timeout in seconds that the proxy waits for response
      from the GTM.The default value of the GUC is <literal>0</literal> which means the proxy
      will wait forever for the response.  User may change value of this parameter in
      GTM proxy's configuration file if faced with unpleasant situations where the
      proxy infinitely waits for a response from the GTM. Otherwise this should be
      left to the default. 
     </para>
    </listitem>

    <listitem>
     <para>
      Fix a bug in handling of multiple unix domain socket directories on the
GTM side.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>


 <sect1 id="release-xl-10r1">
  <title>Postgres-XL Release 10r1</title>

  <note>
   <title>Release Date</title>
   <simpara>2018-10-25</simpara>
   <simpara>Current as of 2018-10-25</simpara>
  </note>

  <sect2>
   <title>Overview</title>
   <para>
    This major release of <productname>Postgres-XL</productname> comes
    after <productname>Postgres-XL</productname> 9.5r1, which was based on
    <productname>PostgreSQL</productname> 9.5. This release includes most of the
    new features added in <productname>PostgreSQL</productname> 9.6 and 10
    releases. This also includes almost all significant performance enhancements
    that were made to <productname>PostgreSQL</productname> in the last few years.
   </para>

   <para>
    PostgreSQL 9.6 added query parallelism and PostgreSQL 10 added declarative
    partitioning. Both these features are now available in Postgres-XL 10r1.
    Both these features come with certain limitations and hence users are advised
    to test these new features thoroughly before deploying applications.
   </para>

   <para>
    A lot of work has gone into improving the code quality of the distributed
    query planner. The query planner now uses several features available in
    core PostgreSQL such as partial aggregates and upper planner pathification.
    This has resulted in fixing several corner bug cases, simplified the code and
    allowed us to enable some features such as GROUPING SETS, ROLLUP and CUBE.
   </para>

   <para>
    Apart from this, a lot of work has gone into fixing outstanding bugs,
    improving stability of the product and significantly improving performance for OLTP
    workloads. The following sections describe the major enhancements in
    <productname>PostgreSQL</productname> that are now available in
    <productname>Postgres-XL</productname>. A short list of features that are
    currently not supported or have limited support is also mentioned in
    <xref linkend="major-unsupported-enhancements">.
   </para>
  </sect2>

  <sect2>
  <title>Migration to Postgres-XL 10r1 </title>
   <sect3>
   <title>Migration to Postgres-XL 10r1 from PostgreSQL 10 </title>
    <para>
     A dump/restore using <xref linkend="app-pg-dumpall">
     is required for those wishing to migrate
     data from PostgreSQL 10 release. We don't currently support <xref
linkend="pgupgrade">, as a mechanism to upgrade from PostgreSQL 10.
    </para>
 
    <para>
    </para>
   </sect3>
   <sect3>
   <title>Migration to Postgres-XL 10r1 from Postgres-XL 9.5r1.x </title>
    <para>
     Version 10r1 contains a number of changes that may affect compatibility
     with previous releases. Since Postgres-XL 10r1 release includes all changes
from PostgreSQL 9.6 and PostgreSQL 10 releases, it is
recommended that you review respective release notes of those releases to find
the exact incompatibilities.
    </para>
   </sect3>
  </sect2>

  <sect2>
   <title>Major Enhancements in Postgres-XL 10r1 </title>
   <para>
    <productname>Postgres-XL</productname> 10r1 is the first major release
after <productname>Postgres-XL</productname> 9.5r1 release. So this release
contains most of the major enhancements that went into
<productname>PostgreSQL</productname> releases 9.6 and 10. This is a very
short list of such enhancements, but all other enhancements also apply, unless
otherwise stated.
   </para>
   <sect3>
    <title>Major Enhancements from PostgreSQL 10 </title>
    <itemizedlist>
     <listitem><para>Declarative table partitioning</para></listitem>
     <listitem><para>Improved query parallelism</para></listitem>
     <listitem><para>Significant general performance improvements</para></listitem>
     <listitem><para>Improved monitoring and control</para></listitem>
    </itemizedlist>
   </sect3>
   <sect3>
    <title>Major Enhancements from PostgreSQL 9.6 </title>
    <itemizedlist>
     <listitem><para>Parallel execution of sequential scans, joins and aggregates</para></listitem>
     <listitem><para> Avoid scanning pages unnecessarily during vacuum freeze operations</para></listitem>
     <listitem><para>Substantial performance improvements, especially in the area of scalability on multi-<acronym>CPU</acronym>-socket servers</para></listitem>
     <listitem><para>Full-text search can now search for phrases (multiple adjacent words)</para></listitem>
    </itemizedlist>
   </sect3>
  </sect2>

  <sect2>
   <title>Changes</title>

   <para>
    Below you will find a detailed account of the changes between
    <productname>Postgres-XL</productname> 10r1 and the previous major
    release.
   </para>

    <sect3>
     <title>Performance</title>
     <itemizedlist>
      <listitem>
       <para>
        Allow minimum value of pgxl_remote_fetch_size to zero
       </para>
       <para>
        This is an experimental work. By setting pgxl_remote_fetch_size to 0, user can
        fetch all rows at once from the remote side (instead of fetching a small number
        at a time, thus giving the node to produce more rows as the previous set is
        consumed). While fetching all rows at once is not very useful, it allows us to
        circumvent PostgreSQL's limitation of not supporting parallel queries unless a
        Portal is run once and to the end.
       </para>
      </listitem>
      <listitem>
       <para>
        Automatically trigger ANALYZE (COORDINATOR) on remote coordinators
       </para>
       <para>
        When a table is manually or automatically analyzed, the coordinator
        will run ANALYZE (COORDINATOR) command to all other coordinators for them to
        update their planner stats. This ensures that the planner stats remain up to date on all
        coordinators in the cluster. The feature works when a table is analyzed
        outside a transaction block.
       </para>
      </listitem>
      <listitem>
       <para>
        Collect index statistics during ANALYZE on coordinator.
       </para>
      </listitem>
      <listitem>
       <para>
        Randomize the choice of the initial ROUNDROBIN node.
       </para>
       <para>
        With roundrobin node, the initial node was always set to the first node
        in the list. That works fine when inserting many rows at once (e.g. with
        INSERT SELECT), but with single-row inserts this puts all data on the
        first node, resulting in unbalanced distribution.

        This randomizes the choice of the initial node, so that with single-row
        inserts the ROUNDROBIN behaves a bit like RANDOM distribution.
       </para>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3>
     <title>Additional Features</title>
     <itemizedlist>
      <listitem>
       <para>
        <command>pgxc_ctl</command> is now a built-in command and gets
automatically compiled and installed along with other binaries.
       </para>
      </listitem>
      <listitem>
       <para>
        Enable Hot Standby on the replicas.
       </para>
      </listitem>
      <listitem>
       <para>
        Add support for MODULO distribution on BIGINT.
       </para>
      </listitem>
      <listitem>
       <para>
        Support an additional syntax ANALYZE (COORDINATOR) to allow users to rebuild
        coordinator side statistics without running ANALYZE again on the datanodes.
       </para>
       <para>
        One of the long standing problems in multi-coordinator setup is that when a
        table is either manually ANALYZEd or auto-analyzed on a coordinator, the other
        coordinators don't update their planner statistics automatically. This is even
        a bigger problem with auto-analyze because a coordinator which is not involved
        in any DMLs, may not be even aware about the changes to the table and hence it
        will not pick up the table for auto-analyze, thus often generating very poor
        query plans.

        We now fix that by automatically running ANALYZE (COORDINATOR) command on the
        remote coordinators when a table is either manually or automatically analyzed
        on one coordinator. ANALYZE (COORDINATOR) does not force a ANALYZE on the
        datanodes, but only rebuilds coordinator side stats using the current stats
        available on the datanodes.
       </para>
      </listitem>
      <listitem>
       <para>
        Support GROUPING SETS, ROLLUP and CUBE.
       </para>
      </listitem>
     </itemizedlist>
    </sect3>
 </sect2>
 <sect2>
  <title>Important Bug Fixes</title>
  <itemizedlist> 
      <listitem>
       <para>
        Use binary-upgrade facilities to ensure consistent column ordering
        while adding a new coordinator/datanode using
        <application>pg_dump</application>/<application>pg_restore</application>.
       </para>
      </listitem>
      <listitem>
       <para>
        Ensure GUC changes by user-defined functions are rolled back correctly. 
       </para>
       <para>
        When a function body has SET clauses attached to it, the function
        validation/execution reflects those GUC changes locally as well as on the
        remote nodes. But we were failing to restore the old values back when the
        function execution ends. That issue is now addressed.
       </para>
      </listitem>
      <listitem>
       <para>
        Ensure CREATE TABLE (LIKE INCLUDING ALL) honors distribution strategy.
       </para>
      </listitem>
      <listitem>
       <para>
        Fix a stack corruption by using dynamic buffer to parse NODE_LIST_RESULT in GTM.
       </para>
      </listitem>
      <listitem>
       <para>
        Make improvements to cluster monitor process and global state reporting.
       </para>
      </listitem>
      <listitem>
       <para>
        Correctly select the GTM proxy for a new node being added.
       </para>
      </listitem>
      <listitem>
       <para>
        Fixes related to handling of schema qualification of temporary tables on remote nodes.
       </para>
      </listitem>
      <listitem>
       <para>
        Fix handling of REFRESH MATERIALIZED VIEW CONCURRENTLY.
       </para>
      </listitem>
      <listitem>
       <para>
        Improve locking semantics in GTM and GTM Proxy.
       </para>
      </listitem>
      <listitem>
       <para>
        Ensure pooler process follows consistent model for SIGQUIT handling.
       </para>
      </listitem>
      <listitem>
       <para>
        Fix broken implementation of recovery to barrier.
       </para>
      </listitem>
      <listitem>
       <para>
        Track clearly whether to run a remote transaction in autocommit or a block.
       </para>
      </listitem>
      <listitem>
       <para>
        Disable FQS for cursors defined with SCROLL.
       </para>
      </listitem>
      <listitem>
       <para>
        Ensure that database objects are created consistently.
       </para>

       <para>
        We now create views/materialised views on all nodes, unless they are temporary
        objects in which case they are created only on the local coordinator and the
        datanodes. Similarly, temporary sequences are created on the local coordinator
        and the datanodes.
       </para>
      </listitem>
      <listitem>
       <para>
        Prevent dropping distribution keys for MODULO.
       </para>
      </listitem>
      <listitem>
       <para>
        Use thread-specific storage for computing a snapshot.
       </para>
      </listitem>
      <listitem>
       <para>
        Add a user configurable parameter <xref linkend="guc-pgxl-remote-fetch-size"> to control the number of rows fetched from
    the remote side during RemoteSubplan execution. Switch connections after processing pgxl_remote_fetch_size rows.
       </para>
      </listitem>
      <listitem>
       <para>
        Allow COPY (INSERT RETURNING).
       </para>
      </listitem>
      <listitem>
       <para>
        Handle temp sequences so that duplicate values are not produced.
       </para>
      </listitem>
      <listitem>
       <para>
        Ensure that the config parameters specified in the gtmPxyExtraConfig file take
        precedence over the defaults.
       </para>
      </listitem>
      <listitem>
       <para>
        Handle sequence's transactional behaviour on GTM.
       </para>
      </listitem>
      <listitem>
       <para>
        Handle multi-command queries correctly inside SQL as well as plpgsql functions.
       </para>
      </listitem>
      <listitem>
       <para>
        Do not silently skip FK constraints if loose_constraints are ON.
       </para>
      </listitem>
      <listitem>
       <para>
         Ensure that the statistics about all-visible pages in fetched from remote
    datanodes and updated at the coordinator for better planning.
       </para>
      </listitem>
  </itemizedlist> 
 </sect2>
 <sect2>
  <title>Known Limitation</title>
  <para>
   While <productname>Postgres-XL</productname> strives hard to stay compatible
with <productname>PostgreSQL</productname> so that applications running on
<productname>PostgreSQL</productname> can be easily ported to
<productname>Postgres-XL</productname>, there are certain known limitations of
the product. Many of these can be addressed as and when sufficient development
funding and resources become available.
  <itemizedlist>
   <listitem>
    <para>
    Distributed deadlock detection is not supported yet. Deadlock detection exists
    on each node, just not across nodes.
    </para>
   </listitem>
   <listitem>
    <para>
    Materialised views are currently maintained only on the coordinator.
    </para>
   </listitem>
   <listitem>
    <para>
    EXCLUSION CONSTRAINTS are enforced when both rows map to the same datanode.
    </para>
   </listitem>
   <listitem>
    <para>
    User defined functions have several limitations, especially when executed
on the datanodes, either directly or indirectly.
    </para>
   </listitem>
   <listitem>
    <para>
    There are restrictions on complex UPDATE/DELETE queries and updating
distribution column values.
    </para>
   </listitem>
   <listitem>
    <para>
    TRIGGERs are not supported.
    </para>
   </listitem>
   <listitem>
    <para>
    EVENT TRIGGERs are not supported.
    </para>
   </listitem>
   <listitem>
    <para>
    SERIALIZABLE TRANSACTIONs are not supported.
    </para>
   </listitem>
   <listitem>
    <para>
    CREATE INDEX CONCURRENTLY is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
    SAVEPOINTs are not supported.
    </para>
   </listitem>
   <listitem>
    <para>
    Large objects are not supported.
    </para>
   </listitem>
   <listitem>
    <para>
    Recursive queries work only in certain conditions.
    </para>
   </listitem>
   <listitem>
    <para>
    Foreign Data Wrappers are not supported.
    </para>
   </listitem>
   <listitem>
    <para>
    INSENSITIVE/SCROLL/WITH HOLD cursors are not supported.
    </para>
   </listitem>
   <listitem>
    <para>
    LISTEN/NOTIFY is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
     Remote Subplan nodes are marked parallel unsafe. This implies that
     parallel workers can only be used for bottom most Remote Subplan node(s) in a
     plan tree.
    </para>
   </listitem>
   <listitem>
    <para>
     CREATE PUBLICATION/SUBSCRIPTION is not supported.
    </para>
   </listitem>
   <listitem>
    <para>
     The distribution column position must be the same on all partitions of a
partitioned table.
    </para>
   </listitem>
  </itemizedlist>
  </para>
 </sect2>
 <sect2>
  <title>Contributing to Postgres-XL</title>
  <para>
   Contributions to <productname>Postgres-XL</productname> are welcome. The
code will be accepted under the same open source license that governs this
released version of <productname>Postgres-XL</productname>. The authors of the
patches will be credited appropriately in the release notes of the future
releases.   
  </para>
 </sect2>
 <sect2>
  <title>Credits</title>
  <para>
   <productname>Postgres-XL</productname> has been evolving over many years,
originating with the <productname>GridSQL</productname>
project and <productname>Postgres-XC</productname>, later combined as TransLattice Storm (StormDB).
TransLattice open sourced the project, resulting in Postgres-XL 9.2. More
recently, the EU-funded Big Data project AXLE funded the main work to bring the
code up to date as <productname>Postgres-XL</productname> 9.5, allowing
<productname>Postgres-XL</productname> to take advantage of the
rapidly increasing BI features plugged into the core of
<productname>PostgreSQL</productname>.  
  </para>
  <para>
   2ndQuadrant has been actively developing and managing
<productname>Postgres-XL</productname> since then. This new release of the
product is a result of efforts by various 2ndQuadrant engineers, with
collaboration of other members of the <productname>Postgres-XL</productname> community.
  </para>
 </sect2>
</sect1>
